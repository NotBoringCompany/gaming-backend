const express = require("express");
const { updateGenesisNBMonData } = require("../api-logic/updateData");
const router = express.Router();

router.post("/updateData", async (req, res) => {
    try {
        const { 
            nbmonId,
            nickname,
            monsterId,
            uniqueId,
            level,
            selectSkillsByHP,
            setSkillByHPBoundaries,
            Quality,
            NBMonLevelUp,
            expMemoryStorage,
            currentExp,
            nextLevelExpRequired,
            fainted,
            statusEffectList,
            skillList,
            uniqueSkillList,
            temporaryPassives,
            hp,
            energy,
            maxHp,
            maxEnergy,
            speed,
            battleSpeed,
            attack,
            specialAttack,
            defense,
            specialDefense,
            criticalHit,
            attackBuff,
            specialAttackBuff,
            defenseBuff,
            specialDefenseBuff,
            criticalBuff,
            ignoreDefenses,
            damageReduction,
            energyShieldValue,
            energyShield,
            surviveLethalBlow,
            totalIgnoreDefense,
            mustCritical,
            immuneCritical,
            elementDamageReduction,
            maxHpEffort,
            maxEnergyEffort,
            speedEffort,
            attackEffort,
            specialAttackEffort,
            defenseEffort,
            specialDefenseEffort
        } = req.body;
        let updateData = await updateGenesisNBMonData(nbmonId,
            nickname,
            monsterId,
            uniqueId,
            level,
            selectSkillsByHP,
            setSkillByHPBoundaries,
            Quality,
            NBMonLevelUp,
            expMemoryStorage,
            currentExp,
            nextLevelExpRequired,
            fainted,
            statusEffectList,
            skillList,
            uniqueSkillList,
            temporaryPassives,
            hp,
            energy,
            maxHp,
            maxEnergy,
            speed,
            battleSpeed,
            attack,
            specialAttack,
            defense,
            specialDefense,
            criticalHit,
            attackBuff,
            specialAttackBuff,
            defenseBuff,
            specialDefenseBuff,
            criticalBuff,
            ignoreDefenses,
            damageReduction,
            energyShieldValue,
            energyShield,
            surviveLethalBlow,
            totalIgnoreDefense,
            mustCritical,
            immuneCritical,
            elementDamageReduction,
            maxHpEffort,
            maxEnergyEffort,
            speedEffort,
            attackEffort,
            specialAttackEffort,
            defenseEffort,
            specialDefenseEffort
        );
        res.json(updateData);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
});

module.exports = router;